There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same
height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.
The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.
If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least 
bricks and return the number of crossed bricks.
You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.


Input: [[1,2,2,1],
        [3,1,2],
        [1,3,2],
        [2,4],
        [3,1,2],
        [1,3,1,1]]

Output: 2


Hash Map Solution
We just have just to make a map for all the contigious sum that we obtain in a particular row i.e prefix sum technique.
When we encounter a sum we place it in Hash Map and increment count.
We maintain a max variable to count the maximum sum that has occured until now.
The we do the same process for the other rows.
When we are done we return total number of rows - max .
Note: We do not have to consider the last column in any particular row because after adding last column, max will become the right most vertical edge of the wall.
class Solution {
    public int leastBricks(List<List<Integer>> wall) {
        HashMap<Integer,Integer> map=new HashMap<>();
        int max=0;
        for(List<Integer> list:wall){
            int sum=0;
            for(int i=0;i<list.size()-1;i++){
                sum+=list.get(i);
                map.put(sum,map.getOrDefault(sum,0)+1);
                max=Math.max(max,map.get(sum));
            }
        }
        return wall.size()-max;
    }
}
