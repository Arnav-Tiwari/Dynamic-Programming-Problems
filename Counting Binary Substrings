Give a string s, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 
1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.

Input: "00110011"
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: "0011", "01", "1100", "10", "0011", and "01".

Notice that some of these substrings repeat and are counted the number of times they occur.

Also, "00110011" is not a valid substring because all the 0's (and 1's) are not grouped together.

class Solution {
    public int countBinarySubstrings(String s) {
        int []groups=new int[s.length()];
        int t=0;
        for(int i=0;i<s.length()-1;i++){
            if(s.charAt(i)!=s.charAt(i+1))
                groups[t++]++;
            else groups[t]++;
        }
        groups[t]++;
        int ans=0;
        for(int i=1;i<=t;i++){
            ans+=Math.min(groups[i],groups[i-1]);
        }
        return ans;
    }
}


We can convert the string s into an array groups that represents the length of same-character contiguous blocks within the string.
For example, if s = "110001111000000", then groups = [2, 3, 4, 6]

count the number of valid binary strings between groups[i] and groups[i+1]. If we have groups[i] = 2, groups[i+1] = 3, then it
represents either "00111" or "11000".We clearly can make min(groups[i], groups[i+1]) valid binary strings within this string.
Because the binary digits to the left or right of this 
string must change at the boundary, our answer can never be larger.
