Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the 
current row, you may move to either index i or index i + 1 on the next row.
Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 .
// Code contains only a resposive main function with given input parameters as per problem statement.
Method 1:Recursive Brute Froce Approach

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        return findMinPath(triangle,0,0);
    }
    public int findMinPath(List<List<Integer>> list,int index,int lindex){
        if(index>=list.size())
            return 0;
        int min=Integer.MAX_VALUE-10000;
        int val=Math.min(findMinPath(list,index+1,lindex),findMinPath(list,index+1,lindex+1));
        min=Math.min(min,val+list.get(index).get(lindex));
        return min;
        
    }
}
Method 2:Recursive Dynamic Programming (Using cache/Memoization) (Top Down Approach)
class Solution {
    int [][]cache;
    public int minimumTotal(List<List<Integer>> triangle) {
        cache=new int[triangle.size()][triangle.size()];
        for(int i=0;i<cache.length;i++){
            Arrays.fill(cache[i],Integer.MAX_VALUE);
        }
        return findMinPath(triangle,0,0);
    }
    public int findMinPath(List<List<Integer>> list,int index,int lindex){
        if(index>=list.size())
            return 0;
        if(cache[index][lindex]!=Integer.MAX_VALUE)
            return cache[index][lindex];
        int min=Integer.MAX_VALUE-10000;
        int val=Math.min(findMinPath(list,index+1,lindex),findMinPath(list,index+1,lindex+1));
        min=Math.min(min,val+list.get(index).get(lindex));
        cache[index][lindex]=min;gvvf
        return min;
        
    }
}
Method 3: Dynamic Programming (Bottom up Iterative) Without using Extra Space
class Solution{
    public int minimumTotal(List<List<Integer>> triangle){
     for(int i=triangle.size()-2;i>=0;i--){
        int val=triangle.get(i).size();
         for(int j=0;j<val;j++){
             int val1=triangle.get(i).get(j)+Math.min(triangle.get(i+1).get(j),triangle.get(i+1).get(j+1));
             triangle.get(i).set(j,val1);
         }
     }
        return triangle.get(0).get(0);
    }
}
